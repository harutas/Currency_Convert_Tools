/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("\r\nconst currencyList = {\r\n    India: [\"Rupee\", \"Paisa\"],\r\n    USA: [\"Dollar\", \"USCent\"],\r\n    Europe: [\"Euro\", \"EuroCent\"],\r\n    UAE: [\"Dirham\", \"Fils\"],\r\n    Japan: [\"Yen\"],\r\n};\r\nconst denominationRate = {\r\n    Rupee: 1.4442,\r\n    Paisa: 0.014442,\r\n    Dollar: 106.1,\r\n    USCent: 1.061,\r\n    Euro: 125.56,\r\n    EuroCent: 1.2556,\r\n    Dirham: 28.89,\r\n    Fils: 0.2889,\r\n    Yen: 1,\r\n};\r\nconst commandInput = document.getElementById(\"command-input\");\r\nconst tarminal = document.getElementById(\"tarminal\");\r\ncommandInput === null || commandInput === void 0 ? void 0 : commandInput.addEventListener(\"keyup\", (e) => serachSubmit(e));\r\nfunction serachSubmit(e) {\r\n    if (commandInput != null) {\r\n        if (e.code == \"Enter\") {\r\n            // [package, command, params(showDenominations [locale], convert[sourceDenomination][sourceAmount][destinationDenomination])]\r\n            const parsedCLIArray = CCTools.commandLineParser(commandInput.value);\r\n            CCTools.appendEchoParagraph(tarminal);\r\n            commandInput.value = \"\";\r\n            // 入力の検証\r\n            let validatorResponse = CCTools.parsedArrayValidator(parsedCLIArray);\r\n            // 結果の出力\r\n            if (validatorResponse.isValid == false) {\r\n                CCTools.appendResultParagraph(tarminal, false, validatorResponse.errorMessage);\r\n            }\r\n            else\r\n                CCTools.appendResultParagraph(tarminal, true, CCTools.evaluatedResultsStringFromParsedCLIArray(parsedCLIArray));\r\n            // 出力divを常に下方向にスクロール\r\n            if (tarminal != null) {\r\n                tarminal.scrollTop = tarminal.scrollHeight;\r\n            }\r\n        }\r\n    }\r\n}\r\nclass CCTools {\r\n    // 要素に出力を追加する\r\n    static appendEchoParagraph(parentDiv) {\r\n        if (parentDiv != null) {\r\n            parentDiv.innerHTML += `\n      <p class=\"m-0\">\n      <span class=\"text-lightgreen\">user</span>\n      <span class=\"text-magenta\"> @ </span>\n      <span class=\"text-info\">recursion</span>: ${commandInput === null || commandInput === void 0 ? void 0 : commandInput.value}\n      </p>\n      `;\r\n        }\r\n        return;\r\n    }\r\n    // 結果を出力する\r\n    static appendResultParagraph(parentDiv, isValid, message) {\r\n        if (parentDiv != null) {\r\n            let promptName = \"\";\r\n            let promptColor = \"\";\r\n            if (isValid) {\r\n                promptName = \"CCTools\";\r\n                promptColor = \"turquoise\";\r\n            }\r\n            else {\r\n                promptName = \"CCToolsError\";\r\n                promptColor = \"red\";\r\n            }\r\n            parentDiv.innerHTML += `\n      <p class=\"m-0\">\n      <span style=\"color: ${promptColor};\">${promptName}</span>: ${message}\n      </p>\n      `;\r\n        }\r\n        return;\r\n    }\r\n    // 入力された文字列をトークンに分割する\r\n    static commandLineParser(cliInputString) {\r\n        const parsedStringInputArray = cliInputString.trim().split(\" \");\r\n        return parsedStringInputArray;\r\n    }\r\n    static parsedArrayValidator(parsedStringInputArray) {\r\n        // 全体の検証\r\n        let validatorResponse = CCTools.universalValidator(parsedStringInputArray);\r\n        if (!validatorResponse.isValid)\r\n            return validatorResponse;\r\n        // コマンドごとの検証\r\n        validatorResponse = CCTools.commandValidator(parsedStringInputArray.slice(1));\r\n        if (!validatorResponse.isValid)\r\n            return validatorResponse;\r\n        return { isValid: true, errorMessage: \"\" };\r\n    }\r\n    // 全体の検証\r\n    // {isValid: <boolean>, errorMessage: <String>}\r\n    static universalValidator(parsedStringInputArray) {\r\n        const validCommandList = [\"showAvailableLocales\", \"showDenominations\", \"convert\"];\r\n        // 最初のトークンはCCTools\r\n        if (parsedStringInputArray[0] != \"CCTools\") {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: \"only CurrencyConvert package supported by this app. input must start with 'CCTools'.\",\r\n            };\r\n        }\r\n        // トークンの上限は5つ\r\n        if (parsedStringInputArray.length > 5) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: \"command line input maximum contain exactly 5 elements.\",\r\n            };\r\n        }\r\n        // コマンドが適切でない\r\n        if (validCommandList.indexOf(parsedStringInputArray[1]) == -1) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `CCTools only supports the following commands: ${validCommandList.join(\",\")}.`,\r\n            };\r\n        }\r\n        return { isValid: true, errorMessage: \"\" };\r\n    }\r\n    // commandごとの検証\r\n    static commandValidator(commandArray) {\r\n        if (commandArray[0] === \"showAvailableLocales\") {\r\n            return CCTools.showAvailableLocalesValidator(commandArray[0], commandArray.slice(1));\r\n        }\r\n        if (commandArray[0] === \"showDenominations\") {\r\n            return CCTools.showDenominationsValidator(commandArray[0], commandArray.slice(1));\r\n        }\r\n        if (commandArray[0] === \"convert\") {\r\n            return CCTools.convertValidator(commandArray[0], commandArray.slice(1));\r\n        }\r\n    }\r\n    // showAvailableLocales:\r\n    // commandArgsArray []\r\n    static showAvailableLocalesValidator(commandName, commandArgsArray) {\r\n        // 引数は0個\r\n        if (commandArgsArray.length != 0) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `command ${commandName} requires exactly 0 argument.`,\r\n            };\r\n        }\r\n        return { isValid: true, errorMessage: \"\" };\r\n    }\r\n    // showDenominations [locale]:\r\n    // commandArgsArray [local]\r\n    static showDenominationsValidator(commandName, commandArgsArray) {\r\n        // 引数は1個\r\n        if (commandArgsArray.length != 1) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `command ${commandName} requires exactly 1 argument.`,\r\n            };\r\n        }\r\n        // サポートされている国\r\n        if (Object.keys(currencyList).indexOf(commandArgsArray[0]) == -1) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `this locale is not supported.`,\r\n            };\r\n        }\r\n        return { isValid: true, errorMessage: \"\" };\r\n    }\r\n    // convert [sourceDenomination][sourceAmount][destinationDenomination]:\r\n    // commandArgsArray [denomination, amount, denomination]\r\n    static convertValidator(commandName, commandArgsArray) {\r\n        // 引数は3個\r\n        if (commandArgsArray.length != 3) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `command ${commandName} requires exactly 3 argument.`,\r\n            };\r\n        }\r\n        // 1つ目の引数が返還前の通貨単位\r\n        if (Object.keys(denominationRate).indexOf(commandArgsArray[0]) === -1) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `this 1st denomination is not supported.`,\r\n            };\r\n        }\r\n        // 2つめの引数がNumber\r\n        if (!CCTools.isContainsNumber(commandArgsArray[1])) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `2nd arg is NaN.`,\r\n            };\r\n        }\r\n        // 3つ目の引数が返還後の通貨単位\r\n        if (Object.keys(denominationRate).indexOf(commandArgsArray[2]) === -1) {\r\n            return {\r\n                isValid: false,\r\n                errorMessage: `this 2nd denomination is not supported.`,\r\n            };\r\n        }\r\n        return { isValid: true, errorMessage: \"\" };\r\n    }\r\n    // 値がnumberであることの確認\r\n    static isContainsNumber(num) {\r\n        let parsedNumber = Number(num);\r\n        return typeof parsedNumber === \"number\" && !isNaN(parsedNumber);\r\n    }\r\n    // 表示させるコンテンツの生成\r\n    static evaluatedResultsStringFromParsedCLIArray(parsedCLIArray) {\r\n        let result = \"\";\r\n        if (parsedCLIArray[1] === \"showAvailableLocales\") {\r\n            result = `<br> ${Object.keys(currencyList).join(\"<br>\")}`;\r\n        }\r\n        if (parsedCLIArray[1] === \"showDenominations\") {\r\n            const locale = parsedCLIArray[2];\r\n            const denominations = currencyList[locale];\r\n            result = `${locale}<br>${denominations.join(\"<br>\")}`;\r\n        }\r\n        if (parsedCLIArray[1] === \"convert\") {\r\n            const rate1 = denominationRate[parsedCLIArray[2]];\r\n            const rate2 = denominationRate[parsedCLIArray[4]];\r\n            result = `${(Number(parsedCLIArray[3]) * rate1) / rate2} ${parsedCLIArray[4]}`;\r\n        }\r\n        return \"your result is: \" + result;\r\n    }\r\n}\r\n// 時間があれば・・・up キーと down キーを押した時に、過去のコマンドライン入力に順番にアクセスできるように機能を実装してください。\r\n\n\n//# sourceURL=webpack://currency-convert-tools/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;